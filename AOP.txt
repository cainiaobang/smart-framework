AOP的实现过程：
该项目AOP使用cglib实现动态代理.

注解一：
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface Controller {
}

注解二：
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.RUNTIME)
public @interface Aspect {
    Class<? extends Annotation> value();
}

切面类
@Aspect(Controller.class)
public class ControllerAspect extends AspectProxy {....}
则所有被Controller标注的类都会被ControllerAspect中的方法拦截，从而实现代理过程。

实现机制：
1：切面类需要继承AspectProxy类
2：读取所有的切面类，对每一个切面类找出其对应的拦截目标类（即对ControllerAspect找出所有被注解：Controller标注的类），生成一个Map<Class<?>, Set<Class<?>>> proxyMap
   集合，这在方法：createProxyMap()中实现。
3：对Map<Class<?>,Set<Class<?>>> proxyMap进行转换，生成Map<Class<?>, List<Proxy>>对象，键是要拦截的目标类，值是其对应的切面类对象集合。
4  在类ProxyManager中，利用cblib生成代理对象，并存放到beanMap中。


